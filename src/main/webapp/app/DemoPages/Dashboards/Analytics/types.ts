import { IShopInfo } from 'app/shared/model/shop-info.model';

type setState<T> = React.Dispatch<React.SetStateAction<T>>;

export type AnalyticsContextProps = {
  totalOrderAmount: number;
  setTotalOrderAmount: setState<number>;
  totalSubscribedAmount: number;
  setTotalSubscribedAmount: setState<number>;
  churnRate: number;
  setChurnRate: setState<number>;
  subscriptionGrowthMonthOverMonth: number;
  setSubscriptionGrowthMonthOverMonth: setState<number>;
  revenueGrowthMonthOverMonth: number;
  setRevenueGrowthMonthOverMonth: setState<number>;
  totalOrderCount: number;
  setTotalOrderCount: setState<number>;
  totalCanceledSubscriptionCount: number;
  setTotalCanceledSubscriptionCount: setState<number>;
  totalPausedSubscriptionCount: number;
  setTotalPausedSubscriptionCount: setState<number>;
  totalCustomerCount: number;
  setTotalCustomerCount: setState<number>;
  averageOrderValue: number;
  setAverageOrderValue: setState<number>;
  moneyFormat: string;
  setMoneyFormat: setState<string>;
  orderSumByWeek: any[];
  setOrderSumByWeek: setState<any[]>;
  subscriptionsTotalByWeek: any[];
  setSubscriptionsTotalByWeek: setState<any[]>;
  selectedDays: number;
  setSelectedDays: setState<number>;
  fromDay: Date;
  setFromDay: setState<Date>;
  toDay: Date;
  setToDay: setState<Date>;
  filterBy: string;
  setFilterBy: setState<string>;
  newSubscription: number;
  setNewSubscription: setState<number>;
  estimatedVsHistoricalRevenue: any[];
  setEstimatedVsHistoricalRevenue: setState<any[]>;
  productDeliveryAnalyticsList: any[];
  setProductDeliveryAnalyticsList: setState<any[]>;
  nextNinetyDayEstimatedRevenueTotal: number;
  setNextNinetyDayEstimatedRevenueTotal: setState<number>;
  nextThirtyDayEstimatedRevenueTotal: number;
  setNextThirtyDayEstimatedRevenueTotal: setState<number>;
  nextSevenDayEstimatedRevenueTotal: number;
  setNextSevenDayEstimatedRevenueTotal: setState<number>;
  totalSubscriptionCount: number;
  setTotalSubscriptionCount: setState<number>;
  totalActiveSubscriptionCount: number;
  setTotalActiveSubscriptionCount: setState<number>;
  totalFailedPaymentsCount: number;
  setTotalFailedPaymentsCount: setState<number>;
  averageSubscriptionValue: number;
  setAverageSubscriptionValue: setState<number>;
  subscribedVsUnsubscribed: any[];
  setSubscribedVsUnsubscribed: setState<any[]>;
  customDatePickerToggle: boolean;
  setCustomDatePickerToggle: setState<boolean>;
  fromDate: Date;
  setFromDate: setState<Date>;
  toDate: Date;
  setToDate: setState<Date>;
  emailValidity: boolean;
  setEmailValidity: setState<boolean>;
  emailSendingProgress: boolean;
  setEmailSendingProgress: setState<boolean>;
  blurred: boolean;
  setBlurred: setState<boolean>;
  inputValueForTestEmailId: string;
  setInputValueForTestEmailId: setState<string>;
  emailSuccessAlert: boolean;
  setEmailSuccessAlert: setState<boolean>;
  emailFailAlert: boolean;
  setEmailFailAlert: setState<boolean>;
  isModalOpen: boolean;
  setIsModalOpen: setState<boolean>;
  totalRecurringOrderCount: number;
  setTotalRecurringOrderCount: setState<number>;
  totalSkippedOrders: number;
  setTotalSkippedOrders: setState<number>;
  approvalRate: number;
  setApprovalRate: setState<number>;
  cancellationRate: number;
  setCancellationRate: setState<number>;
  currencyCode: string;
  setCurrencyCode: setState<string>;
  handleFromDays: (fromDay: Date) => void;
  handleToDays: (toDay: Date) => void;
  handleChangeStatisticsDays: (days: any) => void;
  selectCustomStyles: { dropdownIndicator: (provided: any, state: any) => any };
  shopInfo: IShopInfo;
  productRevenueData: any[];
  productRevenueLoading: boolean;
  loading: {
    analyticsCountersLoading: boolean;
    revenueLoading: boolean;
    subscriptionsLoading: boolean;
    overviewLoading: boolean;
  };
  setLoading: setState<{
    analyticsCountersLoading: boolean;
    revenueLoading: boolean;
    subscriptionsLoading: boolean;
    overviewLoading: boolean;
  }>;
};
